#!/bin/bash

VERSSION="(\033[33;1mv1.0.1\033[0m)"
URL=$1
WORDLIST="$HOME/.b-dirf/.wl/wl.txt"
S="/"
LEN=$((${#URL} + 35))
THREAD=80
COUNT=0
COUNT2=0
RECURSIVE="No"
WL2="No"
NUMs=0.08
Banner="TRUE"
DEF="Yes"
ALL=000
VERBOSE="FALSE"
STA="\033[32mPinged\033[0m"
# colors
U="\033[4m"
B="\033[34;1m"
N="\033[0m"
Y="\033[33m"
GR="\033[2;1m"
W="\033[37;1m"
R="\033[31;1m"
P="\033[35;1m"
G="\033[32;1m"
SB="\033[36m"

# checking slash
if [ ${URL: -1} = "/" ] 2>/dev/null;then echo -n "";else URL=$URL"/";fi

# rm .tmp_bdirf
if [ -f .tmp_bdirf ] 2>/dev/null;then rm .tmp_bdirf;fi

# check connection
function check_connection(){
	printf "\n(${R}Target${N})     : ${URL}" 2>/dev/null
	printf "\n(${R}Thread${N})     : ${THREAD}"
	printf "\n(${R}Recursive${N})  : ${RECURSIVE}"
	printf "\n(${R}Wordlist${N})   : ${WL2}"
	printf "\n(${R}Host status${N}):"
	wget -q --spider $URL 2>/dev/null;
	if [ $? -eq 0 ];then
		printf " (${G}UP${N})\n\n"
	else
		printf " (${R}DOWN${N})\n"
		exit 1
	fi
	curl --head ${URL} 2>/dev/null
}

./setup.sh 2>/dev/null
# Ping
function Ping(){
	a=$(curl $URL${i} -o /dev/null --silent --head --write-out '%{http_code}')
   if [ $a -ne $ALL ] 2>/dev/null;then
      COUNT=$(($COUNT - 1))
      if [ $a -ne 404 ];then
   		if [ $a -eq 301 ];then
				Type="Dir";col=${B};sl="/";
			elif [ $a -eq 302 ];then
				Type="Dir";col=${B};sl="/";
			elif [ $a -eq 200 ];then
				col=${N};sl="";Type=" - ";
			else
				col=${N};sl="";Type=" - ";
			fi
      	printf "\r(${G}+${N})\aFound(${SB}$Type${N}): (${Y}$a${N}) %-s${col}%-s${N}\r\n" "${URL}" "${i}${sl}"&& if [ $VERBOSE = "TRUE" ];then echo "${URL}${i}" >> .tmp_bdirf;fi
      fi
      if [ $RECURSIVE = "Yes" ];then
         if [ $a -eq 301 ];then
            URL=$URL$i$S
            recursive&
			fi
		fi
   fi
}
function About(){
	printf "
${R}Name${N}    : b-dirf
${R}Version${N} : ${VERSSION}
${R}Script${N}  : bash
${R}Author${N}  : Madhava
${R}Org${N}     : Black-widow-z
\n"
}
# Default broutfource
function brout_fource1(){
	for i in $(cat ${WORDLIST});do
		Ping &
		LEN3=$(($LEN - 20))
		if [ ${#i} -lt $LEN3 ] 2>/dev/null;then
			printf "\r(${P}Processing${N}) : (${R}404${N}) $W%-${LEN3}s${N}" "${i}"
		fi
		if [ $COUNT -gt $THREAD ];then
			wait -n 1
		fi
		COUNT=$(($COUNT + 2))
	done
	wait;sleep 8
	printf "\r\a(${G}Default Scan Fineshed${N})%-38s\r\n\n"
}

# Recursive
function recursive(){
	for i in $(cat ${WORDLIST});do
		Ping &
		if [ $COUNT -gt $THREAD ];then
			wait -n $(($THREAD / 2))
		fi
		COUNT=$(($COUNT + 2))
	done
	wait
}

function Verbose(){
	printf "${R}[URL]${N}${Y} $i${SB}\n|_____________${N}\n" 2>/dev/null;curl -I $i
}

# Help
function Help(){
	printf "\n> Files & Directory bruteforcer

${R}Usage${N}: b-dirf <URL> [<ARUMENT>] [<ARUMENT>] ...

${U}${P}Arguments${N}                          ${U}${P}Discription${N}
    
  -a         --all                 All status except (404)
  -h         --help                Print thid is banner and exit
  -r         --recursive           Recursive mode${R}*${N}
  -t=<int>   --thread=<int>        Number of threads
                                   default is $THREAD
  -v         --verbose             Show hedder for all possible status
  -w=<path>  --wordlist=<path>     Specify wordlist with path
  -q         --quite               Start without banner
  -n         --no-default          Run without default wordlist
                                   use with -w
  -s         --spider              Print HEAD and exit
  -S         --spider-all          Print HEDA, body and exit
  -p         --ping                Ping to get status code and exit
  -p=<int>   --ping=<int>          Ping <int> times and exit
  -A         --about               About
  
${R}Eg${N}:
   b-dirf https://example.com
   b-dirf https://example.com -t=100                          # Thread size
   b-dirf https://example.com --wordlist=/path/wordlist.txt   # Add Wordlist
   b-dirf https://example.com -w=/path/wordlist.txt -n        # Only Wordlist

${R}Indication${N}:
  ${R}*${N} tiny-bug\n"

	exit 1
}

# brout_fource2
function brout_fource2(){
	for i in $(cat ${WORDLIST2} 2>/dev/null);do
		Ping &
		LEN3=$(($LEN - 20))
		if [ ${#i} -lt $LEN3 ] 2>/dev/null;then
			printf "\r(${P}Processing${N}) : (${R}404${N}) $W%-${LEN3}s${N}" "${i}"
		fi
		if [ $COUNT -gt $THREAD ];then
			wait -n 1
			#COUNT=$(($COUNT - 1))
		fi
		COUNT=$(($COUNT + 2))
	done
	wait;sleep 5
	printf "\r(${G}Wordlist Fineshed${N})%-38s\r\n\n"
}

# Arguments
for j in $@;do
	case $j in
		-h|--help|help)
			Help;;
		-r|--recursive)
			RECURSIVE="Yes";;
		-w=*|--wordlist=*)
			WORDLIST2="${j##*\=}"
			if [ $WORDLIST2 = $ZZZZ ] 2>/dev/null;then
				printf "${SB}--wordlist=${N}/path/wordlist.txt\n"
				exit 1
			else
				if [ -f $WORDLIST2 ];then
					WL2="Yes"
				else
					printf "(${R}!${N})No such a file \"${WORDLIST2}\". try --help\n";exit 1
				fi
			fi;;
		-v|--verbose)
			VERBOSE="TRUE";;
		-w|--wordlist)
			printf "${SB}--wordlist=${N}/path/wordlist.txt\n";exit 1;;
		-t=*|--thread=*)
			T="${j##*\=}"
			if [ $T == $ZZZZ ] 2>/dev/null;then
				printf "${SB}--thread=${N}<number>\n";exit 1
				TC="FALSE"
			fi
			for k in $(seq 0 10000);do if [ $T -eq $k ] 2>/dev/null;then TC="TRUE";break;fi;done		
			if [ $TC = "TRUE" ] 2>/dev/null;then
				if [ $T -le 2 ] 2>/dev/null;then THREAD=2;
				elif [ $T -gt 800 ] 2>/dev/null;then THREAD=800;
				else
					THREAD=$T
				fi
			else
				printf "(${R}!${N})Positive Integer required.\n";exit 1
			fi;;

		-t|--thread)
			printf "${SB}--thread=${N}<number>\n";exit 1;;
		-q|--quite)
			Banner="FALSE";;
		-n|--no-default)
			DEF="No";;
		-A|--about)
			About;exit 1;;
		-a|--all)
			ALL=404;;
		-s|--spider)
			curl $URL -I 2>/dev/null;exit 1;;
		-S|--spider-all)
			curl $URL -I 2>/dev/null;curl $URL 2>/dev/null;exit 1;;
		-p|--ping)
			Get=$(curl $URL -o /dev/null --silent --head --write-out "%{http_code}" 2>/dev/null)
			if [ $Get -eq 0 ] 2>/dev/null;then STA="${R}Failed${N}";fi
			printf "(${P}Ping${N}): 1 $URL  ${Y}Status${N}: ${Get} [$STA]\n";exit 1;;
		-p=*|--ping=*)
			PI="${j##*\=}"
			if [ $PI == $ZZZZ ] 2>/dev/null;then
				printf "${SB}--ping=${N}<number>\n";exit 1
				PC="FALSE"
			fi
			for k in $(seq 0 2000);do if [ $PI -eq $k ] 2>/dev/null;then PC="TRUE";break;fi;done
			if [ $PC = "TRUE" ] 2>/dev/null;then
				if [ $PI -le 1 ] 2>/dev/null;then N=1;fi
			else
				printf "(${R}!${N})Positive Integer required.\n";exit 1
			fi
			for i in $(seq 1 $PI);do
				Get=$(curl $URL -o /dev/null --silent --head --write-out "%{http_code}" 2>/dev/null)
				if [ $Get -eq 0 ] 2>/dev/null;then STA="${R}Failed${N}";fi
				printf "(${P}Ping${N}): %2d $URL  ${Y}Status${N}: ${Get} [$STA]\n" "$i";
			done
			exit 1
			;;


	esac
done
function banner(){	
	printf "${GR}
╔══╗──────╔═══╗─────────╔═╗$(sleep $NUMs)";printf "
║╔╗║──────╚╗╔╗║─────────║╔╝$(sleep $NUMs)";printf "
║╚╝╚╗─╔══╗─║║║║─╔╗─╔═╗─╔╝╚╗$(sleep $NUMs)";printf "
║╔═╗║─╚══╝─║║║║──╣─║╔╝─╚╗╔╝$(sleep $NUMs)";printf "
║╚═╝║─────╔╝╚╝║─║║─║║───║║─    ┌∩┐(◣_◢)┌∩┐$(sleep $NUMs)";printf "
╚═══╝─────╚═══╝─╚╝─╚╝───╚╝─\a${N}  (${GR}@Black-widow-z${N})$(sleep $NUMs)"
}
if [ $1 = $ZZZZ ] 2>/dev/null;then Help;exit 1;fi
if [ $Banner = "TRUE" ] 2>/dev/null;then banner;fi
check_connection
if [ $WL2 = "Yes" ];then
	if [ $DEF = "No" ];then
		brout_fource2
		printf ""
	else
		brout_fource1&brout_fource2
	fi
	wait
else
	if [ $DEF = "Yes" ];then brout_fource1;fi
fi

if [ $VERBOSE = "TRUE" ];then
	for i in $(cat .tmp_bdirf 2>/dev/null);do 
		Verbose&
		wait
	done
	rm .tmp_bdirf 2>/dev/null
fi
echo
